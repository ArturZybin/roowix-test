{"version":3,"sources":["components/TableCell.tsx","components/Table.tsx","components/SelectionLayer.tsx","components/EditorCell.tsx","components/Editor.tsx","App.tsx","index.tsx"],"names":["TableCell","isRight","selectionCoords","setSelected","ref","useRef","isSelected","element","start","x","y","end","areSelectionCoordsExist","rect","getBoundingClientRect","elLeft","elRight","width","elTop","window","pageYOffset","elBottom","height","selectionLeft","Math","min","selectionRight","max","selectionTop","selectionBottom","checkIsSelected","current","useEffect","className","Table","matrix","setSelectedCell","thead","length","weekdays","theadInner","key","i","push","createThead","tbody","tbodyInner","map","row","rowIndex","trowInner","cell","cellIndex","matrixPosition","status","createTbody","SelectionLayer","selectionStyles","setSelectionCoords","handleStopSelection","useState","isSelection","setIsSelection","startCoords","setStartCoords","endCoords","setEndCoords","selectionLayerRef","startSelection","event","pageX","pageY","document","addEventListener","handleSelection","stopSelection","removeEventListener","layer","areCoordsExist","left","top","abs","getSelectionStyles","style","EditorCell","handleChangeStatus","setStatus","onClick","Editor","matrixCopy","cellsPosition","closeEditor","applyChanges","editableMatrix","setEditableMatrix","newEditableMatrix","matrixLength","fakeRowInner","createDecorativeRow","App","state","selectedMatrix","openEditor","editCellsPosition","position","setState","prevState","newSelectedMatrix","selectedMatrixCopy","lastRowIndex","lastCellIndex","startPosition","endPosition","forEach","handleCloseEditor","handleApplyEditorChanges","newMatrix","this","React","Component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f3f6d1d9.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react'\r\nimport { ISelectionCoords } from '../types'\r\n\r\ninterface IProps {\r\n   isRight: boolean,\r\n   selectionCoords: ISelectionCoords,\r\n   matrixPosition: [number, number],\r\n   setSelected: (status: boolean) => void\r\n}\r\n\r\n\r\nexport const TableCell: React.FC<IProps> = ({ isRight, selectionCoords, setSelected }) => {\r\n   const ref = useRef(null)\r\n   const isSelected = checkIsSelected(ref.current, selectionCoords)\r\n   useEffect(() => {\r\n      setSelected(isSelected)\r\n   // eslint-disable-next-line react-hooks/exhaustive-deps\r\n   }, [isSelected])\r\n\r\n\r\n   let className = 'table__cell '\r\n   className += isSelected ? 'table__cell_selected ' : ''\r\n   className += isRight ? 'table__cell_right' : ''\r\n\r\n   return (\r\n      <td ref={ref} className={className} />\r\n   )\r\n}\r\n\r\n\r\nfunction checkIsSelected(element: HTMLTableElement | null, selectionCoords: ISelectionCoords): boolean {\r\n   if (!element || !areSelectionCoordsExist(selectionCoords)) return false\r\n\r\n   const rect = element.getBoundingClientRect()\r\n   const elLeft = rect.x\r\n   const elRight = elLeft + rect.width\r\n   const elTop = window.pageYOffset + rect.y\r\n   const elBottom = elTop + rect.height\r\n\r\n   const selectionLeft = Math.min(selectionCoords?.start.x as number, selectionCoords?.end.x as number)\r\n   const selectionRight = Math.max(selectionCoords?.start.x as number, selectionCoords?.end.x as number)\r\n   const selectionTop = Math.min(selectionCoords?.start.y as number, selectionCoords?.end.y as number)\r\n   const selectionBottom = Math.max(selectionCoords?.start.y as number, selectionCoords?.end.y  as number)\r\n\r\n   if (elRight > selectionLeft &&\r\n      elLeft < selectionRight &&\r\n      elBottom > selectionTop &&\r\n      elTop < selectionBottom) return true\r\n\r\n   return false\r\n}\r\n\r\n\r\nfunction areSelectionCoordsExist(selectionCoords: ISelectionCoords) {\r\n   return selectionCoords?.start.x !== null &&\r\n      selectionCoords?.start.y !== null &&\r\n      selectionCoords?.end.x !== null &&\r\n      selectionCoords?.end.y !== null\r\n}","import React from 'react'\nimport { TMatrix, ISelectionCoords } from '../types'\nimport { TableCell } from './TableCell'\n\n\ninterface IProps {\n   matrix: TMatrix,\n   selectionCoords: ISelectionCoords,\n   setSelectedCell: (position: [number, number], status: boolean) => void\n}\n\nexport const Table: React.FC<IProps> = ({ matrix, selectionCoords, setSelectedCell }) => {\n   const thead = createThead(matrix[1].length)\n   const tbody = createTbody()\n\n\n   function createTbody(): JSX.Element {\n      const tbodyInner: JSX.Element[] = matrix.map((row, rowIndex) => {\n\n         const trowInner: JSX.Element[] = row.map((cell, cellIndex) => {\n            const setSelected = (status: boolean) => setSelectedCell([rowIndex, cellIndex], status)\n\n            return (<TableCell\n               key={cellIndex}\n               isRight={!!cell}\n               selectionCoords={selectionCoords}\n               matrixPosition={[rowIndex, cellIndex]}\n               setSelected={setSelected}\n            />)\n         })\n\n         return (\n            <tr key={rowIndex}>\n               <td className=\"table__day-number\">номер {rowIndex + 1}</td>\n               {trowInner}\n            </tr>\n         )\n      })\n\n      return <tbody>{tbodyInner}</tbody>\n   }\n\n\n   return (\n      <table className=\"table\">\n         {thead}\n         {tbody}\n      </table>\n   )\n}\n\n\nfunction createThead(length: number): JSX.Element {\n   const weekdays = ['пн', 'вт', 'ср', 'чт', 'пт']\n   const theadInner: JSX.Element[] = [<td key={7}></td>]\n\n   for (let i = 0; i < length; i++) {\n      theadInner.push(<td key={i} className=\"table__head-cell\">{weekdays[i]}</td>)\n   }\n\n   return <thead><tr>{theadInner}</tr></thead>\n}","import React, { useState, useEffect, useRef } from 'react'\r\nimport { ISelectionCoords } from '../types';\r\n\r\ninterface IProps {\r\n   setSelectionCoords: (selectionCoords: ISelectionCoords) => void,\r\n   handleStopSelection: () => void\r\n}\r\n\r\n\r\nexport const SelectionLayer: React.FC<IProps> = ({ setSelectionCoords, handleStopSelection }) => {\r\n   const [isSelection, setIsSelection] = useState<boolean>(false)\r\n   const [startCoords, setStartCoords] = useState<number[] | null[]>([null, null])\r\n   const [endCoords, setEndCoords] = useState<number[] | null[]>([null, null])\r\n\r\n   const selectionLayerRef = useRef(null)\r\n\r\n   useEffect(() => {\r\n      const layer = selectionLayerRef.current as unknown as HTMLElement\r\n\r\n      layer.addEventListener('mousedown', startSelection)\r\n      return () => layer.removeEventListener('mousedown', startSelection)\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n   }, [])\r\n\r\n\r\n   useEffect(() => {\r\n      if (!areCoordsExist(startCoords, endCoords)) return\r\n      setSelectionCoords({\r\n         start: { x: startCoords[0], y: startCoords[1] },\r\n         end: { x: endCoords[0], y: endCoords[1] }\r\n      })\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n   }, [startCoords[0], startCoords[1], endCoords[0], endCoords[1]])\r\n\r\n\r\n   function startSelection(event: MouseEvent) {\r\n      setIsSelection(true)\r\n      setStartCoords([event.pageX, event.pageY])\r\n      setEndCoords([event.pageX, event.pageY])\r\n      document.addEventListener('mousemove', handleSelection)\r\n      document.addEventListener('mouseup', stopSelection)\r\n   }\r\n\r\n   function handleSelection(event: MouseEvent) {\r\n      setEndCoords([event.pageX, event.pageY])\r\n   }\r\n\r\n   function stopSelection() {\r\n      setIsSelection(false)\r\n      setStartCoords([null, null])\r\n      setEndCoords([null, null])\r\n\r\n      setSelectionCoords({\r\n         start: { x: null, y: null },\r\n         end: { x: null, y: null }\r\n      })\r\n      handleStopSelection()\r\n\r\n      document.removeEventListener('mousemove', handleSelection)\r\n      const layer = selectionLayerRef.current as unknown as HTMLElement\r\n      layer.removeEventListener('mouseup', stopSelection)\r\n   }\r\n\r\n\r\n   let selectionStyles\r\n   if (areCoordsExist(startCoords, endCoords)) {\r\n      selectionStyles = getSelectionStyles(startCoords as number[], endCoords as number[])\r\n   }\r\n\r\n   return (\r\n      <div className=\"selection-layer\" ref={selectionLayerRef}>\r\n         {isSelection && <div className=\"selection-layer__selection\" style={selectionStyles}></div>}\r\n      </div>\r\n   )\r\n}\r\n\r\n\r\nfunction getSelectionStyles(startCoords: number[], endCoords: number[]) {\r\n   const left = Math.min(startCoords[0], endCoords[0])\r\n   const top = Math.min(startCoords[1], endCoords[1])\r\n   const width = Math.abs(endCoords[0] - startCoords[0])\r\n   const height = Math.abs(endCoords[1] - startCoords[1])\r\n\r\n   return { left, top, width, height }\r\n}\r\n\r\n\r\nfunction areCoordsExist(startCoords: number[] | null[], endCoords: number[] | null[]) {\r\n   return startCoords[0] !== null && startCoords[1] !== null && endCoords[0] !== null && endCoords[1] !== null\r\n}","import React, { useState } from 'react'\n\n\ninterface IProps {\n   isRight: boolean,\n   handleChangeStatus: (status: boolean) => void,\n}\n\nexport const EditorCell: React.FC<IProps> = ({isRight, handleChangeStatus}) => {\n   const [status, setStatus] = useState(isRight)\n\n   function toggleStatus() {\n      setStatus(!status)\n      handleChangeStatus(!status)\n   }\n\n   let className = 'editor__cell '\n   if (status) {\n      className += 'editor__cell_checked'\n   }\n\n   return (\n      <td onClick={toggleStatus} className={className}></td>\n   )\n}","import React, { useState } from 'react'\nimport { IEditCellsPosition } from '../types'\nimport { EditorCell } from './EditorCell'\n\n\ninterface IProps {\n   matrixCopy: number[][],\n   cellsPosition: IEditCellsPosition,\n   closeEditor: () => void\n   applyChanges: (newMatrix: number[][]) => void\n}\n\nexport const Editor: React.FC<IProps> = ({ matrixCopy, cellsPosition, closeEditor, applyChanges }) => {\n   const [editableMatrix, setEditableMatrix] = useState<number[][]>(matrixCopy)\n\n   const thead = createThead(cellsPosition.start.cell, cellsPosition.end.cell)\n   const tbody = createTbody()\n\n\n   function createTbody(): JSX.Element {\n      const tbodyInner: JSX.Element[] = []\n\n      for (let rowIndex = cellsPosition.start.row; rowIndex <= cellsPosition.end.row; rowIndex++) {\n         const trowInner: JSX.Element[] = []\n         for (let cellIndex = cellsPosition.start.cell; cellIndex <= cellsPosition.end.cell; cellIndex++) {\n\n            const handleChangeStatus = (status: boolean) => {\n               const newEditableMatrix = editableMatrix.map((row) => [...row])\n               newEditableMatrix[rowIndex][cellIndex] = status ? 1 : 0\n               setEditableMatrix(newEditableMatrix)\n            }\n\n            trowInner.push(<EditorCell\n               key={cellIndex}\n               isRight={!!matrixCopy[rowIndex][cellIndex]}\n               handleChangeStatus={handleChangeStatus}\n            />)\n         }\n\n         tbodyInner.push(\n            <tr key={rowIndex}>\n               <td className=\"editor__day-number\">номер {rowIndex + 1}</td>\n               {trowInner}\n            </tr>\n         )\n      }\n\n      tbodyInner.push(createDecorativeRow(cellsPosition, editableMatrix.length))\n\n      return <tbody>{tbodyInner}</tbody>\n   }\n\n\n   return (\n      <div className=\"background-locker\">\n         <div className=\"editor\">\n            <table className=\"editor__table\">\n               {thead}\n               {tbody}\n            </table>\n            <button\n               className=\"editor__button editor__button_type_decline\"\n               onClick={closeEditor}\n            >\n               Отменить\n            </button>\n            <button\n               className=\"editor__button editor__button_type_accept\"\n               onClick={() => applyChanges(editableMatrix)}\n            >\n               Применить\n            </button>\n         </div>\n      </div>\n   )\n}\n\n\nfunction createThead(start: number, end: number): JSX.Element {\n   const weekdays = ['пн', 'вт', 'ср', 'чт', 'пт']\n   const theadInner: JSX.Element[] = [<td key={7}></td>]\n\n   for (let i = start; i <= end; i++) {\n      theadInner.push(<td key={i} className=\"editor__head-cell\">{weekdays[i]}</td>)\n   }\n\n   return <thead><tr>{theadInner}</tr></thead>\n}\n\n\nfunction createDecorativeRow(cellsPosition: IEditCellsPosition, matrixLength: number): JSX.Element {\n   const fakeRowInner: JSX.Element[] = []\n   for (let cellIndex = cellsPosition.start.cell; cellIndex <= cellsPosition.end.cell + 1; cellIndex++) {\n      fakeRowInner.push(<td className=\"editor__fake-cell\" key={cellIndex}></td>)\n   }\n\n   return (<tr key={matrixLength}>{fakeRowInner}</tr>)\n}","import React from 'react';\n\nimport 'normalize.css';\nimport './styles/style.scss';\n\nimport { Table } from './components/Table';\nimport { SelectionLayer } from './components/SelectionLayer';\nimport { ISelectionCoords, IEditCellsPosition } from './types';\nimport { Editor } from './components/Editor';\n\n\ninterface IState {\n   matrix: number[][],\n   selectionCoords: ISelectionCoords,\n   selectedMatrix: number[][],\n   openEditor: boolean,\n   editCellsPosition: IEditCellsPosition\n}\n\nclass App extends React.Component<{}, IState> {\n   state = {\n      matrix: [\n         [1, 0, 1, 0, 0],\n         [0, 0, 0, 0, 0],\n         [1, 0, 1, 0, 0],\n         [0, 0, 0, 0, 0]\n      ],\n      selectionCoords: {\n         start: { x: null, y: null },\n         end: { x: null, y: null }\n      },\n      selectedMatrix: [\n         [0, 0, 0, 0, 0],\n         [0, 0, 0, 0, 0],\n         [0, 0, 0, 0, 0],\n         [0, 0, 0, 0, 0]\n      ],\n      openEditor: false,\n      editCellsPosition: {\n         start: {\n            row: -1,\n            cell: -1\n         },\n         end: {\n            row: -1,\n            cell: -1\n         }\n      }\n   }\n\n\n   setSelectedCell = (position: [number, number], status: boolean): void => {\n      this.setState((prevState: IState) => {\n         const newSelectedMatrix = prevState.selectedMatrix.map((row) => [...row])\n         newSelectedMatrix[position[0]][position[1]] = status ? 1 : 0\n         return { selectedMatrix: newSelectedMatrix }\n      })\n   }\n\n\n   setSelectionCoords = (selectionCoords: ISelectionCoords) => {\n      this.setState({ selectionCoords })\n   }\n\n\n   handleStopSelection = () => {\n      const selectedMatrixCopy = this.state.selectedMatrix.map((row) => [...row])\n      const lastRowIndex = this.state.matrix.length - 1\n      const lastCellIndex = this.state.matrix[0].length - 1\n\n      let startPosition: [number, number] | null = null\n      let endPosition: [number, number] | null = null\n\n      selectedMatrixCopy.forEach((row, rowIndex) => {\n         row.forEach((cell, cellIndex) => {\n            if (!startPosition && cell) {\n               startPosition = [rowIndex, cellIndex]\n            }\n\n            if (startPosition && cell\n               && (rowIndex === lastRowIndex || !selectedMatrixCopy[rowIndex + 1][cellIndex])\n               && (cellIndex === lastCellIndex || !selectedMatrixCopy[rowIndex][cellIndex + 1])\n            ) {\n               endPosition = [rowIndex, cellIndex]\n            }\n         })\n      })\n\n      if (startPosition && endPosition) {\n         this.setState({\n            openEditor: true,\n            editCellsPosition: {\n               start: {\n                  row: startPosition[0],\n                  cell: startPosition[1]\n               },\n               end: {\n                  row: endPosition[0],\n                  cell: endPosition[1]\n               }\n            }\n         })\n         return\n      }\n   }\n\n\n   handleCloseEditor = () => {\n      this.setState({\n         openEditor: false,\n         editCellsPosition: {\n            start: {\n               row: -1,\n               cell: -1\n            },\n            end: {\n               row: -1,\n               cell: -1\n            }\n         }\n      })\n   }\n\n\n   handleApplyEditorChanges = (newMatrix: number[][]) => {\n      this.setState({\n         matrix: newMatrix,\n         openEditor: false,\n         editCellsPosition: {\n            start: {\n               row: -1,\n               cell: -1\n            },\n            end: {\n               row: -1,\n               cell: -1\n            }\n         }\n      })\n   }\n\n\n   render() {\n      const { matrix, selectionCoords, openEditor, editCellsPosition } = this.state\n      const matrixCopy = matrix.map((row) => [...row])\n\n      return (\n         <>\n            <Table\n               matrix={matrix}\n               selectionCoords={selectionCoords}\n               setSelectedCell={this.setSelectedCell}\n            />\n            <SelectionLayer\n               setSelectionCoords={this.setSelectionCoords}\n               handleStopSelection={this.handleStopSelection}\n            />\n            {openEditor &&\n               <Editor\n                  matrixCopy={matrixCopy}\n                  cellsPosition={editCellsPosition}\n                  closeEditor={this.handleCloseEditor}\n                  applyChanges={this.handleApplyEditorChanges}\n               />}\n         </>\n      )\n   }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n   <React.StrictMode>\n      <App />\n   </React.StrictMode>,\n   document.getElementById('root')\n);"],"sourceRoot":""}